#include <iostream>

int main(){

    //      Лекція по вказівниках


/* Основні поняття
Вказівник - це змінна, що містить адресу памʼяті.
Оператор & - використовується для отримння адреси памʼяті.
Оператор * - використовується для отримання значення, збереженого за адресою, що знаходиться у вказівнику.
*/

/*Оголошення та використання вкзаівників
Оголошення вказівників --  int* ptr;
Присвоєння вказівникам адреси памʼяті -- ptr = &variable;
Отримання значення, збереженого за адресою  -- int value = *ptr;
*/

/* Вказівники та масиви
Вказівники та індексація вказівників -- int arr[5]; int* ptr = arr;
Арифметика вказівників -- ptr++; ptr--; ptr+=n; ptr-=n;
*/

/* Вказівники та функції
Передача вказівників у функії -- void MyFunction(int* ptr);
Повернення вказівників у функцію -- int* Myfunction();
*/  

/* Вказівники на функції
Оголошення вказівників на функції -- int (*ptr)(int,int);
Передача вказівників на функції у функції -- void MyFunction(int (*ptr)(int,int));
*/

/* Вказівник на константу та константні вказівники
const int* ptr;  -- Вказівник на константу
int* const ptr;  -- Константний вказівник
const int* const ptr; -- Константний вказівник на константу
*/

/* Вказівники та динамічне виділення памʼяті 
int * ptr = new int; -- Динамічне виділення памʼяті
delete ptr;  --Звільнення динамічної виділеної памʼяті
*/

/* Небезпеки та кращі практики при використані вказівників
Уникати даних зі стеку після звільнення памʼяті
Запобігати ʼДикихʼ вказівників (указівників на памʼять, яка вже звільненна)
*/


                                                        //Stack, Heap


/*  Стек
Стек(Stack) - Це область памʼяті, де зберігаються автоматично виділені та звільненні локальні змінні та функційні дані.
        Основні особливотсі СТЕКУ:

- LIFO(Lasy-in-First-Out) -Останній елемент, який був доданий на стек, буде першим, що буде вилучено.

- Фіксований розмір - Розмір стеку зазвичай фіксований при створенні програми та залежить від обраної платформи та області 
застосування.

        Основні використання стеку:

- Локальні змінні функцій: Змінні, що оголошені всередині функції, зберігаються на стеку.
- Повернення значень функції: Адреса повернення та локальні змінні функцій зберігаються на стеку під час виклику функцій. 
    
*/

/* Купа
Купа(Heap) - Це динаміна область памʼяті, в якій можна динамічно виділяти та звільняти памʼять вручну.

        Основні особливості КУПИ:

- Розмір купи  - Розмір купи може змінюватись під час роботи програми, вона може збільшуватись або зменшуватись залежно від потреб.

- Необхідність вручного керування - Памʼять в купі потрібно видалити вручну після завершення її використання за допомогою функцій
(new,delete).

        Основні використання купи:

- Динамічне виділення памʼяті - Купа дозволяє виділяти памʼять за потребою під час виконання програми, коли розмір не відомий
на етапі компіляції.

- Створення складних структур данних - Купа дозволяє створювати складні структури данних такі як: звʼязні списки, дерева, графи.
*/

return 0;
}